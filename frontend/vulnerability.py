import streamlit as st
import zipfile
import os
import tempfile
from langchain_groq import ChatGroq
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_JUSTIFY, TA_LEFT
from reportlab.platypus import Paragraph, SimpleDocTemplate, Spacer, Preformatted
from reportlab.lib.units import inch
from io import StringIO

# Initialize the LLM model
llm = ChatGroq(
    temperature=0,
    groq_api_key='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',
    model_name="llama-3.1-70b-versatile"
)

# Streamlit app setup
st.title("3rd Party Vulnerability Analysis")

# File upload section
uploaded_file = st.file_uploader("Upload a ZIP file containing your APK and related files", type="zip")

# Function to analyze file content in chunks
def analyze_file_content(llm, content):
    try:
        max_chunk_size = 1000  # Adjust this size as needed
        chunks = [content[i:i + max_chunk_size] for i in range(0, len(content), max_chunk_size)]
        analysis_report = ""
        
        for chunk in chunks:
            response = llm.invoke(chunk)
            analysis_report += response.content + "\n"
        
        return analysis_report
    except Exception as e:
        st.write(f"Error during analysis: {e}")
        return ""

# Submit button
if uploaded_file:
    submit_button = st.button("Submit")

    if submit_button:
        with tempfile.TemporaryDirectory() as tmpdirname:
            zip_path = os.path.join(tmpdirname, "uploaded.zip")
            with open(zip_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(tmpdirname)
            
            relevant_files = []
            for root, dirs, files in os.walk(tmpdirname):
                for file in files:
                    if file.endswith(('.java', '.kt', '.so', '.json', '.jar')):
                        relevant_files.append(os.path.join(root, file))

            st.write(f"Found {len(relevant_files)} files for analysis.")

            analysis_report = ""
            for file_path in relevant_files:
                try:
                    with open(file_path, 'r', errors='ignore') as file:
                        file_content = file.read()
                        st.write(f"Analyzing ...")
                        report_part = analyze_file_content(llm, file_content)
                        if report_part.strip():
                            analysis_report += f"*Analysis :*\n{report_part}\n"
                        else:
                            st.write(f"No issues found in {file_path} or file could not be analyzed.")
                except Exception as e:
                    analysis_report += f"An error occurred while reading {file_path}: {e}\n"
                    st.write(f"Error reading {file_path}: {e}")

            st.write("### 3rd Party Vulnerability Analysis Report")
            if analysis_report.strip():
                st.write(analysis_report)
            else:
                st.write("No vulnerabilities were detected, or the analysis failed to process the files.")

            # PDF generation with proper formatting and text alignment
            pdf_path = os.path.join(tmpdirname, "3rd_Party_Vulnerability_Report.pdf")
            pdf = SimpleDocTemplate(pdf_path, pagesize=letter)
            styles = getSampleStyleSheet()

            # Modify the existing 'Title' style and create custom styles
            title_style = styles['Title']
            title_style.fontSize = 18
            title_style.textColor = colors.darkblue
            title_style.alignment = TA_JUSTIFY
            title_style.spaceAfter = 12

            # Custom styles for the PDF
            styles.add(ParagraphStyle(name='CustomSubtitle', fontSize=14, textColor=colors.darkgreen, alignment=TA_JUSTIFY, spaceAfter=10))
            styles.add(ParagraphStyle(name='CustomNormal', fontSize=12, textColor=colors.black, alignment=TA_LEFT, leading=15))
            styles.add(ParagraphStyle(name='CustomCode', fontName="Courier", fontSize=10, textColor=colors.darkred, alignment=TA_LEFT, leading=12))

            elements = []

            # Title
            title = Paragraph("3rd Party Vulnerability Analysis Report", title_style)
            elements.append(title)
            elements.append(Spacer(1, 12))

            # Analysis content
            for line in StringIO(analysis_report).readlines():
                if line.strip().startswith("*Analysis :*"):
                    elements.append(Paragraph(line.strip(), styles['CustomSubtitle']))
                elif line.strip().startswith("    "):  # Indented lines for code blocks
                    elements.append(Preformatted(line.strip(), styles['CustomCode']))
                else:
                    elements.append(Paragraph(line.strip(), styles['CustomNormal']))
                elements.append(Spacer(1, 12))

            pdf.build(elements)

            # Provide a download button for the PDF report
            with open(pdf_path, 'rb') as pdf_file:
                st.download_button(
                    label="Download PDF Report",
                    data=pdf_file,
                    file_name="3rd_Party_Vulnerability_Report.pdf",
                    mime='application/pdf'
                )